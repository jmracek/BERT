// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: BatchInferenceRequest.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(869037e1249d10bf);
CAPNP_DECLARE_SCHEMA(9f33bff4a617cf0c);
CAPNP_DECLARE_SCHEMA(957e2396d131d86b);
enum class Type_957e2396d131d86b: uint16_t {
  BOOL,
  INT8,
  INT16,
  INT32,
  INT64,
  UINT8,
  UINT16,
  UINT32,
  UINT64,
  FP32,
  FP64,
  STRING,
  BINARY,
};
CAPNP_DECLARE_ENUM(Type, 957e2396d131d86b);

}  // namespace schemas
}  // namespace capnp


struct BatchInferenceRequest {
  BatchInferenceRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Input;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(869037e1249d10bf, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BatchInferenceRequest::Input {
  Input() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_957e2396d131d86b Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f33bff4a617cf0c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class BatchInferenceRequest::Reader {
public:
  typedef BatchInferenceRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasApiKey() const;
  inline  ::capnp::Text::Reader getApiKey() const;

  inline  ::uint32_t getModelId() const;

  inline  ::uint32_t getBatchSize() const;

  inline bool hasInputs() const;
  inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Reader getInputs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BatchInferenceRequest::Builder {
public:
  typedef BatchInferenceRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasApiKey();
  inline  ::capnp::Text::Builder getApiKey();
  inline void setApiKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initApiKey(unsigned int size);
  inline void adoptApiKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownApiKey();

  inline  ::uint32_t getModelId();
  inline void setModelId( ::uint32_t value);

  inline  ::uint32_t getBatchSize();
  inline void setBatchSize( ::uint32_t value);

  inline bool hasInputs();
  inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Builder getInputs();
  inline void setInputs( ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Builder initInputs(unsigned int size);
  inline void adoptInputs(::capnp::Orphan< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>> disownInputs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BatchInferenceRequest::Pipeline {
public:
  typedef BatchInferenceRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BatchInferenceRequest::Input::Reader {
public:
  typedef Input Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::BatchInferenceRequest::Input::Type getType() const;

  inline bool hasValue() const;
  inline ::capnp::AnyPointer::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BatchInferenceRequest::Input::Builder {
public:
  typedef Input Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::BatchInferenceRequest::Input::Type getType();
  inline void setType( ::BatchInferenceRequest::Input::Type value);

  inline bool hasValue();
  inline ::capnp::AnyPointer::Builder getValue();
  inline ::capnp::AnyPointer::Builder initValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BatchInferenceRequest::Input::Pipeline {
public:
  typedef Input Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool BatchInferenceRequest::Reader::hasApiKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BatchInferenceRequest::Builder::hasApiKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BatchInferenceRequest::Reader::getApiKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BatchInferenceRequest::Builder::getApiKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BatchInferenceRequest::Builder::setApiKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BatchInferenceRequest::Builder::initApiKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BatchInferenceRequest::Builder::adoptApiKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BatchInferenceRequest::Builder::disownApiKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t BatchInferenceRequest::Reader::getModelId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BatchInferenceRequest::Builder::getModelId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BatchInferenceRequest::Builder::setModelId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BatchInferenceRequest::Reader::getBatchSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BatchInferenceRequest::Builder::getBatchSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BatchInferenceRequest::Builder::setBatchSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool BatchInferenceRequest::Reader::hasInputs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BatchInferenceRequest::Builder::hasInputs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Reader BatchInferenceRequest::Reader::getInputs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Builder BatchInferenceRequest::Builder::getInputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BatchInferenceRequest::Builder::setInputs( ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>::Builder BatchInferenceRequest::Builder::initInputs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BatchInferenceRequest::Builder::adoptInputs(
    ::capnp::Orphan< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>> BatchInferenceRequest::Builder::disownInputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BatchInferenceRequest::Input,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BatchInferenceRequest::Input::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BatchInferenceRequest::Input::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BatchInferenceRequest::Input::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BatchInferenceRequest::Input::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BatchInferenceRequest::Input::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BatchInferenceRequest::Input::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BatchInferenceRequest::Input::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BatchInferenceRequest::Input::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::BatchInferenceRequest::Input::Type BatchInferenceRequest::Input::Reader::getType() const {
  return _reader.getDataField< ::BatchInferenceRequest::Input::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::BatchInferenceRequest::Input::Type BatchInferenceRequest::Input::Builder::getType() {
  return _builder.getDataField< ::BatchInferenceRequest::Input::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BatchInferenceRequest::Input::Builder::setType( ::BatchInferenceRequest::Input::Type value) {
  _builder.setDataField< ::BatchInferenceRequest::Input::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BatchInferenceRequest::Input::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BatchInferenceRequest::Input::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader BatchInferenceRequest::Input::Reader::getValue() const {
  return ::capnp::AnyPointer::Reader(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder BatchInferenceRequest::Input::Builder::getValue() {
  return ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder BatchInferenceRequest::Input::Builder::initValue() {
  auto result = ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
  result.clear();
  return result;
}


